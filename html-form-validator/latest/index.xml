<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Getting started on xtreamwayz</title><link>https://xtreamwayz.github.io/html-form-validator/latest/</link><description>Recent content in Getting started on xtreamwayz</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://xtreamwayz.github.io/html-form-validator/latest/index.xml" rel="self" type="application/rss+xml"/><item><title>API attributes</title><link>https://xtreamwayz.github.io/html-form-validator/latest/api-attributes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xtreamwayz.github.io/html-form-validator/latest/api-attributes/</guid><description>Special Attributes name and data-input-name The name is required to link validation messages and request data.
1 2 &amp;lt;input type=&amp;#34;email&amp;#34; name=&amp;#34;email_address&amp;#34; /&amp;gt; &amp;lt;div data-input-name=&amp;#34;email_address&amp;#34; /&amp;gt; data-reuse-submitted-value Reuse the submitted value and inject it as a value.
1 2 3 4 5 6 &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;username&amp;#34; data-reuse-submitted-value=&amp;#34;true&amp;#34; value=&amp;#34;xtreamwayz&amp;#34; /&amp;gt; data-filters Apply filters to the submitted value. Multiple standard filters can be used, separated by a vertical bar.</description></item><item><title>API form elements</title><link>https://xtreamwayz.github.io/html-form-validator/latest/api-form-elements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xtreamwayz.github.io/html-form-validator/latest/api-form-elements/</guid><description>The form validator detects HTML5 form elements and adds default validators depending on the used attributes. Standard validation rules are added for you so you don&amp;rsquo;t need to repeat those over and over again. And then there are the special attributes with trigger standard validation:
[[max|API Attributes#max]] [[min|API Attributes#min]] [[step|API Attributes#step]] [[maxlength|API Attributes#maxlength]] [[minlength|API Attributes#minlength]] [[multiple|API Attributes#multiple]] [[pattern|API Attributes#pattern]] [[required|API Attributes#required]], [[aria-required|API Attributes#aria-required]] And if you need more validation or specific filters there is a [[data-filters|API Attributes#data-filters]] and [[data-validators|API Attributes#data-validators]] attribute.</description></item><item><title>Customizing the InputFilter</title><link>https://xtreamwayz.github.io/html-form-validator/latest/customizing-the-inputfilter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xtreamwayz.github.io/html-form-validator/latest/customizing-the-inputfilter/</guid><description>Setting a default InputFilter Factory Sometimes you need custom filters or validators. To register those, a Laminas\InputFilter\Factory can be used and injected into the FormFactory. Or use the included InputFilterFactory to set this up for you from this config:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 return = [ &amp;#39;laminas-inputfilter&amp;#39; =&amp;gt; [ &amp;#39;validators&amp;#39; =&amp;gt; [ // Attach custom validators or override standard validators &amp;#39;invokables&amp;#39; =&amp;gt; [ &amp;#39;recaptcha&amp;#39; =&amp;gt; RecaptchaValidator::class, ], ], &amp;#39;filters&amp;#39; =&amp;gt; [ // Attach custom filters or override standard filters &amp;#39;invokables&amp;#39; =&amp;gt; [], ], ], ]; Re-usable InputFilters Still want to use a html form instead of generating it with complicated classes, but you want to reuse the validation part?</description></item><item><title>Example Expressive action</title><link>https://xtreamwayz.github.io/html-form-validator/latest/example-expressive-action/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xtreamwayz.github.io/html-form-validator/latest/example-expressive-action/</guid><description>Let&amp;rsquo;s take the contact form as an example and use it in a laminas-expressive application with Twig as a renderer. The form is pretty basic and has extra StringTrim and StripTags filters for the name and subject input fields. It also has csrf protection with a hidden token which is validated with the identical validator.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 &amp;lt;!</description></item><item><title>Example Expressive custom validators</title><link>https://xtreamwayz.github.io/html-form-validator/latest/example-expressive-custom-validators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xtreamwayz.github.io/html-form-validator/latest/example-expressive-custom-validators/</guid><description>Let&amp;rsquo;s take the contact form as an example and use it in a laminas-expressive application with Twig as a renderer. The form is pretty basic and has extra StringTrim and StripTags filters for the name and subject input fields. It also has csrf protection with a hidden token which is validated with the identical validator. And use a custom recaptcha validator for bot protection.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 &amp;lt;!</description></item><item><title>Example password confirmation</title><link>https://xtreamwayz.github.io/html-form-validator/latest/example-password-confirmation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xtreamwayz.github.io/html-form-validator/latest/example-password-confirmation/</guid><description>1 2 3 4 5 &amp;lt;form action=&amp;#34;#&amp;#34; method=&amp;#34;post&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;password&amp;#34; name=&amp;#34;password&amp;#34; required /&amp;gt; &amp;lt;input type=&amp;#34;password&amp;#34; name=&amp;#34;password-confirm&amp;#34; required data-validators=&amp;#34;identical{token:password}&amp;#34; /&amp;gt; &amp;lt;button type=&amp;#34;submit&amp;#34;&amp;gt;Submit&amp;lt;/button&amp;gt; &amp;lt;/form&amp;gt;</description></item><item><title>Example Recaptcha</title><link>https://xtreamwayz.github.io/html-form-validator/latest/example-recaptcha/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xtreamwayz.github.io/html-form-validator/latest/example-recaptcha/</guid><description>Sometimes you need to validate javascript generated from fields. This is easy with the data-input-name and data-validators attributes.
1 2 3 4 5 6 7 8 &amp;lt;form action=&amp;#34;#&amp;#34; method=&amp;#34;post&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;form-group g-recaptcha&amp;#34; aria-required=&amp;#34;true&amp;#34; data-input-name=&amp;#34;g-recaptcha-response&amp;#34; data-validators=&amp;#34;recaptcha{key:{{ recaptcha_priv_key }}}&amp;#34; data-sitekey=&amp;#34;{{ recaptcha_pub_key }}&amp;#34; data-theme=&amp;#34;light&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;button type=&amp;#34;submit&amp;#34;&amp;gt;Submit&amp;lt;/button&amp;gt; &amp;lt;/form&amp;gt; The data-sitekey and data-theme are recaptcha settings. The data-input-name attribute enables the input filter for g-recatcha-response and the data-validators attribute enables the validation.</description></item><item><title>Example Symfony action</title><link>https://xtreamwayz.github.io/html-form-validator/latest/example-symfony-action/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xtreamwayz.github.io/html-form-validator/latest/example-symfony-action/</guid><description>Symfony forms can be a real pain to design and even worse to debug. Luckily you are not bound to use Symfony forms and can use something else if you like to. For example this html-form-factory :)
Let&amp;rsquo;s take the contact form as an example and use it in a Symfony application. For the fun of it the ADR (Action-Domain-Response) pattern is being to used which can easily be achieved by registering the action as a service.</description></item><item><title>Known issues</title><link>https://xtreamwayz.github.io/html-form-validator/latest/known-issues/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xtreamwayz.github.io/html-form-validator/latest/known-issues/</guid><description>The form doesn&amp;rsquo;t render all elements Check if you use a valid form. A valid form includes the form tag.
1 2 3 4 &amp;lt;form action=&amp;#34;/&amp;#34; method=&amp;#34;post&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;foo&amp;#34; data-reuse-submitted-value=&amp;#34;true&amp;#34; /&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;baz&amp;#34; data-filters=&amp;#34;stringtrim&amp;#34; /&amp;gt; &amp;lt;/form&amp;gt; Renders as:
1 2 3 4 &amp;lt;form action=&amp;#34;/&amp;#34; method=&amp;#34;post&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;foo&amp;#34; /&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;baz&amp;#34; /&amp;gt; &amp;lt;/form&amp;gt; And a form with a missing form tag:</description></item></channel></rss>